// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package docs

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a user profile
	// (POST /profile)
	CreateProfile(ctx echo.Context) error
	// Fetch alias of a user
	// (GET /{perma_id}/alias)
	GetAlias(ctx echo.Context, permaId openapi_types.UUID) error
	// Merge different identities of a known user
	// (POST /{perma_id}/alias)
	AliasUser(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch users bounded to a profile
	// (GET /{perma_id}/bindUsers)
	GetUsersBindedToProfile(ctx echo.Context, permaId openapi_types.UUID) error
	// bind user identities to a known profile
	// (POST /{perma_id}/bindUsers)
	BindUserToProfile(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch profileconsent
	// (GET /{perma_id}/consent)
	GetConsentedApps(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch applications users has given consent to collect
	// (GET /{perma_id}/consent/collect)
	GetConsentedAppsToCollect(ctx echo.Context, permaId openapi_types.UUID) error
	// provide consent to collect data
	// (POST /{perma_id}/consent/collect)
	GiveConsentToCollect(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch applications users has given consent to share
	// (GET /{perma_id}/consent/share)
	GetConsentedAppsToShare(ctx echo.Context, permaId openapi_types.UUID) error
	// provide consent to share profile
	// (POST /{perma_id}/consent/share)
	GiveConsentToShare(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch 360 profile of a user
	// (GET /{perma_id}/profile)
	GetProfileData(ctx echo.Context, permaId openapi_types.UUID, params GetProfileDataParams) error
	// Fetch App context of the user
	// (GET /{perma_id}/profile/app_context)
	GetListofAppContextData(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch 360 profile of a user
	// (GET /{perma_id}/profile/personality)
	GetPersonalityProfileData(ctx echo.Context, permaId openapi_types.UUID) error
	// update personality data for a user
	// (PATCH /{perma_id}/profile/personality)
	AddPersonalityData(ctx echo.Context, permaId openapi_types.UUID) error
	// update personality data for a user
	// (PUT /{perma_id}/profile/personality)
	AddPersonalityData(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch App context of the user
	// (GET /{perma_id}/profile/{app_id}/app_context)
	GetAppContextData(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID) error
	// update personality data for a user
	// (PATCH /{perma_id}/profile/{app_id}/app_context)
	AddAppContextData(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID) error
	// update personality data for a user
	// (PUT /{perma_id}/profile/{app_id}/app_context)
	AddAppContextData(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID) error
	// Push profile events
	// (POST /{perma_id}/{app_id}/event)
	AddEvent(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID) error
	// Fetch events emitted by a user
	// (GET /{perma_id}/{app_id}/events)
	GetUserEvents(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID, params GetUserEventsParams) error
	// Push user events
	// (POST /{perma_id}/{app_id}/events)
	AddEvents(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID) error
	// Fetch specific event emitted by a user
	// (GET /{perma_id}/{app_id}/events/{event_id})
	GetUserEvent(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID, eventId openapi_types.UUID, params GetUserEventParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateProfile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProfile(ctx)
	return err
}

// GetAlias converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAlias(ctx, permaId)
	return err
}

// AliasUser converts echo context to params.
func (w *ServerInterfaceWrapper) AliasUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AliasUser(ctx, permaId)
	return err
}

// GetUsersBindedToProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersBindedToProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersBindedToProfile(ctx, permaId)
	return err
}

// BindUserToProfile converts echo context to params.
func (w *ServerInterfaceWrapper) BindUserToProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BindUserToProfile(ctx, permaId)
	return err
}

// GetConsentedApps converts echo context to params.
func (w *ServerInterfaceWrapper) GetConsentedApps(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConsentedApps(ctx, permaId)
	return err
}

// GetConsentedAppsToCollect converts echo context to params.
func (w *ServerInterfaceWrapper) GetConsentedAppsToCollect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConsentedAppsToCollect(ctx, permaId)
	return err
}

// GiveConsentToCollect converts echo context to params.
func (w *ServerInterfaceWrapper) GiveConsentToCollect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GiveConsentToCollect(ctx, permaId)
	return err
}

// GetConsentedAppsToShare converts echo context to params.
func (w *ServerInterfaceWrapper) GetConsentedAppsToShare(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConsentedAppsToShare(ctx, permaId)
	return err
}

// GiveConsentToShare converts echo context to params.
func (w *ServerInterfaceWrapper) GiveConsentToShare(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GiveConsentToShare(ctx, permaId)
	return err
}

// GetProfileData converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfileDataParams
	// ------------- Optional query parameter "includeAppContext" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeAppContext", ctx.QueryParams(), &params.IncludeAppContext)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeAppContext: %s", err))
	}

	// ------------- Optional query parameter "app_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_id", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileData(ctx, permaId, params)
	return err
}

// GetListofAppContextData converts echo context to params.
func (w *ServerInterfaceWrapper) GetListofAppContextData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetListofAppContextData(ctx, permaId)
	return err
}

// GetPersonalityProfileData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPersonalityProfileData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPersonalityProfileData(ctx, permaId)
	return err
}

// UpdatePersonalityData converts echo context to params.
func (w *ServerInterfaceWrapper) AddPersonalityData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddPersonalityData(ctx, permaId)
	return err
}

// UpdatePersonalityData converts echo context to params.
func (w *ServerInterfaceWrapper) AddPersonalityData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddPersonalityData(ctx, permaId)
	return err
}

// GetAppContextData converts echo context to params.
func (w *ServerInterfaceWrapper) GetAppContextData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAppContextData(ctx, permaId, appId)
	return err
}

// AddAppContextData converts echo context to params.
func (w *ServerInterfaceWrapper) AddAppContextData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddAppContextData(ctx, permaId, appId)
	return err
}

// AddAppContextData converts echo context to params.
func (w *ServerInterfaceWrapper) AddAppContextData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddAppContextData(ctx, permaId, appId)
	return err
}

// AddEvent converts echo context to params.
func (w *ServerInterfaceWrapper) AddEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddEvent(ctx, permaId, appId)
	return err
}

// GetUserEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserEventsParams
	// ------------- Optional query parameter "searchString" -------------

	err = runtime.BindQueryParameter("form", true, false, "searchString", ctx.QueryParams(), &params.SearchString)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter searchString: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserEvents(ctx, permaId, appId, params)
	return err
}

// AddEvents converts echo context to params.
func (w *ServerInterfaceWrapper) AddEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddEvents(ctx, permaId, appId)
	return err
}

// GetUserEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// ------------- Path parameter "event_id" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", ctx.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserEventParams
	// ------------- Optional query parameter "searchString" -------------

	err = runtime.BindQueryParameter("form", true, false, "searchString", ctx.QueryParams(), &params.SearchString)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter searchString: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserEvent(ctx, permaId, appId, eventId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/profile", wrapper.CreateProfile)
	router.GET(baseURL+"/:perma_id/alias", wrapper.GetAlias)
	router.POST(baseURL+"/:perma_id/alias", wrapper.AliasUser)
	router.GET(baseURL+"/:perma_id/bindUsers", wrapper.GetUsersBindedToProfile)
	router.POST(baseURL+"/:perma_id/bindUsers", wrapper.BindUserToProfile)
	router.GET(baseURL+"/:perma_id/consent", wrapper.GetConsentedApps)
	router.GET(baseURL+"/:perma_id/consent/collect", wrapper.GetConsentedAppsToCollect)
	router.POST(baseURL+"/:perma_id/consent/collect", wrapper.GiveConsentToCollect)
	router.GET(baseURL+"/:perma_id/consent/share", wrapper.GetConsentedAppsToShare)
	router.POST(baseURL+"/:perma_id/consent/share", wrapper.GiveConsentToShare)
	router.GET(baseURL+"/:perma_id/profile", wrapper.GetProfileData)
	router.GET(baseURL+"/:perma_id/profile/app_context", wrapper.GetListofAppContextData)
	router.GET(baseURL+"/:perma_id/profile/personality", wrapper.GetPersonalityProfileData)
	router.PATCH(baseURL+"/:perma_id/profile/personality", wrapper.AddPersonalityData)
	router.PUT(baseURL+"/:perma_id/profile/personality", wrapper.AddPersonalityData)
	router.GET(baseURL+"/:perma_id/profile/:app_id/app_context", wrapper.GetAppContextData)
	router.PATCH(baseURL+"/:perma_id/profile/:app_id/app_context", wrapper.AddAppContextData)
	router.PUT(baseURL+"/:perma_id/profile/:app_id/app_context", wrapper.AddAppContextData)
	router.POST(baseURL+"/:perma_id/:app_id/event", wrapper.AddEvent)
	router.GET(baseURL+"/:perma_id/:app_id/events", wrapper.GetUserEvents)
	router.POST(baseURL+"/:perma_id/:app_id/events", wrapper.AddEvents)
	router.GET(baseURL+"/:perma_id/:app_id/events/:event_id", wrapper.GetUserEvent)

}
