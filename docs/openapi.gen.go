// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package docs

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for EventEventType.
const (
	Identify EventEventType = "Identify"
	Page     EventEventType = "Page"
	Track    EventEventType = "Track"
)

// Defines values for IdentityDataAccountStatus.
const (
	Active    IdentityDataAccountStatus = "active"
	Inactive  IdentityDataAccountStatus = "inactive"
	Suspended IdentityDataAccountStatus = "suspended"
)

// Alias defines model for Alias.
type Alias struct {
	PreviousPermaId string `json:"previous_perma_id"`
}

// AppContext defines model for AppContext.
type AppContext struct {
	AppId          *string   `json:"app_id,omitempty"`
	AppPermissions *[]string `json:"app_permissions,omitempty"`
	Devices        *[]struct {
		Browser        *string    `json:"browser,omitempty"`
		BrowserVersion *string    `json:"browser_version,omitempty"`
		DeviceId       *string    `json:"device_id,omitempty"`
		DeviceType     *string    `json:"device_type,omitempty"`
		Ip             *string    `json:"ip,omitempty"`
		LastUsed       *time.Time `json:"last_used,omitempty"`
		Os             *string    `json:"os,omitempty"`
	} `json:"devices,omitempty"`
	FeatureFlags *struct {
		BetaFeaturesEnabled *bool `json:"beta_features_enabled,omitempty"`
		DarkMode            *bool `json:"dark_mode,omitempty"`
	} `json:"feature_flags,omitempty"`
	LastActiveApp   *string `json:"last_active_app,omitempty"`
	RegionsAccessed *[]struct {
		City          *string    `json:"city,omitempty"`
		Country       *string    `json:"country,omitempty"`
		FirstAccessed *time.Time `json:"first_accessed,omitempty"`
		LastAccessed  *time.Time `json:"last_accessed,omitempty"`
		Timezone      *string    `json:"timezone,omitempty"`
	} `json:"regions_accessed,omitempty"`
	SubscriptionPlan *string `json:"subscription_plan,omitempty"`
	UsageMetrics     *struct {
		DailyActiveTime *int `json:"daily_active_time,omitempty"`
		MonthlyLogins   *int `json:"monthly_logins,omitempty"`
	} `json:"usage_metrics,omitempty"`
}

// Consent defines model for Consent.
type Consent struct {
	Collect []openapi_types.UUID `json:"collect"`
	Share   []openapi_types.UUID `json:"share"`
}

// Event defines model for Event.
type Event struct {
	// AppId Unique TraitId for the application
	AppId openapi_types.UUID `json:"app_id"`

	// Context Device and session information
	Context map[string]interface{} `json:"context"`

	// EventId Unique TraitId for the event
	EventId openapi_types.UUID `json:"event_id"`

	// EventName Name of the event
	EventName string `json:"event_name"`

	// EventTimestamp Time at which the event occurred
	EventTimestamp time.Time `json:"event_timestamp"`

	// EventType Type of the event
	EventType EventEventType `json:"event_type"`

	// Locale User's language and regional settings
	Locale     *string           `json:"locale,omitempty"`
	Properties *Event_Properties `json:"properties,omitempty"`
}

// EventEventType Type of the event
type EventEventType string

// Event_Properties defines model for Event.Properties.
type Event_Properties struct {
	union json.RawMessage
}

// IdentifyEvent Event properties for user identity tracking
type IdentifyEvent struct {
	// Traits Custom user attributes
	Traits *map[string]interface{} `json:"traits,omitempty"`

	// UserId Unique identifier for the user
	UserId *openapi_types.UUID `json:"user_id,omitempty"`
}

// IdentityData defines model for IdentityData.
type IdentityData struct {
	AccountStatus     *IdentityDataAccountStatus `json:"account_status,omitempty"`
	CreatedAt         *time.Time                 `json:"created_at,omitempty"`
	DisplayName       *string                    `json:"display_name,omitempty"`
	Email             *openapi_types.Email       `json:"email,omitempty"`
	FirstName         *string                    `json:"first_name,omitempty"`
	Groups            *[]string                  `json:"groups,omitempty"`
	IdpProvider       *string                    `json:"idp_provider,omitempty"`
	LastLogin         *time.Time                 `json:"last_login,omitempty"`
	LastName          *string                    `json:"last_name,omitempty"`
	Locale            *string                    `json:"locale,omitempty"`
	MfaEnabled        *bool                      `json:"mfa_enabled,omitempty"`
	PhoneNumbers      *[]string                  `json:"phone_numbers,omitempty"`
	Picture           *string                    `json:"picture,omitempty"`
	PreferredUsername *string                    `json:"preferred_username,omitempty"`
	ProfileUrl        *string                    `json:"profile_url,omitempty"`
	Roles             *[]string                  `json:"roles,omitempty"`
	Timezone          *string                    `json:"timezone,omitempty"`
	UpdatedAt         *time.Time                 `json:"updated_at,omitempty"`
	Username          *string                    `json:"username,omitempty"`
}

// IdentityDataAccountStatus defines model for IdentityData.AccountStatus.
type IdentityDataAccountStatus string

// PageEvent Event properties for page interactions
type PageEvent struct {
	Engagement *struct {
		// EngagementScore Custom engagement score
		EngagementScore *float32 `json:"engagement_score,omitempty"`

		// InteractiveElements List of interactive elements clicked
		InteractiveElements *[]string `json:"interactive_elements,omitempty"`
	} `json:"engagement,omitempty"`
	Page *struct {
		// ContentType Type of content (e.g., article, video)
		ContentType *string `json:"content_type,omitempty"`

		// PageCategory Logical category of the page
		PageCategory *string `json:"page_category,omitempty"`

		// PageType Type of page (e.g., landing_page, blog)
		PageType *string `json:"page_type,omitempty"`

		// Path Page path without domain
		Path *string `json:"path,omitempty"`

		// PreviousPage Identifier for the previous page
		PreviousPage *string `json:"previous_page,omitempty"`

		// Referrer URL of the previous page
		Referrer *string `json:"referrer,omitempty"`

		// ScrollDepth Percentage of page scrolled
		ScrollDepth *string `json:"scroll_depth,omitempty"`

		// Search Query parameters from the URL
		Search *string `json:"search,omitempty"`

		// TimeOnPage Time spent on the page in seconds
		TimeOnPage *int `json:"time_on_page,omitempty"`

		// Title Title of the page
		Title *string `json:"title,omitempty"`

		// Url Full URL of the page
		Url *string `json:"url,omitempty"`
	} `json:"page,omitempty"`
	Utm *struct {
		// Campaign Campaign name
		Campaign *string `json:"campaign,omitempty"`

		// Medium Marketing medium (e.g., email, social)
		Medium *string `json:"medium,omitempty"`

		// Source Traffic source (e.g., google, facebook)
		Source *string `json:"source,omitempty"`
	} `json:"utm,omitempty"`
}

// PersonalityData defines model for PersonalityData.
type PersonalityData struct {
	CommunicationPreferences *struct {
		EmailNotifications *bool `json:"email_notifications,omitempty"`
		PushNotifications  *bool `json:"push_notifications,omitempty"`
		SmsNotifications   *bool `json:"sms_notifications,omitempty"`
	} `json:"communication_preferences,omitempty"`
	Interests           *[]string `json:"interests,omitempty"`
	PreferredLanguage   *string   `json:"preferred_language,omitempty"`
	ShoppingPreferences *struct {
		DiscountPreference *string   `json:"discount_preference,omitempty"`
		FavoriteBrands     *[]string `json:"favorite_brands,omitempty"`
	} `json:"shopping_preferences,omitempty"`
}

// ProfileData defines model for ProfileData.
type ProfileData struct {
	AppContext    *[]AppContext         `json:"app_context,omitempty"`
	Identity      *IdentityData         `json:"identity,omitempty"`
	OriginCountry string                `json:"originCountry"`
	Personality   *PersonalityData      `json:"personality,omitempty"`
	UserIds       *[]openapi_types.UUID `json:"user_ids,omitempty"`
}

// ProfileDataWithoutAppContext defines model for ProfileDataWithoutAppContext.
type ProfileDataWithoutAppContext struct {
	Identity      *IdentityData         `json:"identity,omitempty"`
	OriginCountry string                `json:"originCountry"`
	Personality   *PersonalityData      `json:"personality,omitempty"`
	UserIds       *[]openapi_types.UUID `json:"user_ids,omitempty"`
}

// TrackEvent Event properties for tracking user interactions
type TrackEvent struct {
	// Action The specific action performed (click, scroll)
	Action *string `json:"action,omitempty"`

	// Label Additional label for categorization
	Label *string `json:"label,omitempty"`

	// ObjectId Unique identifier for the interacted object
	ObjectId *string `json:"object_id,omitempty"`

	// ObjectName Human-readable name of the object
	ObjectName *string `json:"object_name,omitempty"`

	// ObjectType The type of object interacted with (button, product)
	ObjectType *string `json:"object_type,omitempty"`

	// Referrer URL of the referring page
	Referrer *string `json:"referrer,omitempty"`

	// Source Source of the interaction (website, mobile app)
	Source *string `json:"source,omitempty"`

	// Url URL where the event occurred
	Url *string `json:"url,omitempty"`

	// Value A numeric value associated with the event
	Value *float32 `json:"value,omitempty"`
}

// BindUserToProfileJSONBody defines parameters for BindUserToProfile.
type BindUserToProfileJSONBody = []openapi_types.UUID

// GiveConsentToCollectJSONBody defines parameters for GiveConsentToCollect.
type GiveConsentToCollectJSONBody = []openapi_types.UUID

// GiveConsentToShareJSONBody defines parameters for GiveConsentToShare.
type GiveConsentToShareJSONBody = []openapi_types.UUID

// GetProfileDataParams defines parameters for GetProfileData.
type GetProfileDataParams struct {
	// IncludeAppContext Whether to include application context data
	IncludeAppContext *bool `form:"includeAppContext,omitempty" json:"includeAppContext,omitempty"`

	// AppId Application TraitId for fetching profile data with app context
	AppId *openapi_types.UUID `form:"app_id,omitempty" json:"app_id,omitempty"`
}

// GetUserEventsParams defines parameters for GetUserEvents.
type GetUserEventsParams struct {
	// SearchString Optional search filter
	SearchString *string `form:"searchString,omitempty" json:"searchString,omitempty"`

	// Offset Number of records to skip for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of records to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetUserEventParams defines parameters for GetUserEvent.
type GetUserEventParams struct {
	// SearchString Optional search filter
	SearchString *string `form:"searchString,omitempty" json:"searchString,omitempty"`

	// Offset Number of records to skip for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of records to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateProfileJSONRequestBody defines body for CreateProfile for application/json ContentType.
type CreateProfileJSONRequestBody = ProfileData

// AliasUserJSONRequestBody defines body for AliasUser for application/json ContentType.
type AliasUserJSONRequestBody = Alias

// BindUserToProfileJSONRequestBody defines body for BindUserToProfile for application/json ContentType.
type BindUserToProfileJSONRequestBody = BindUserToProfileJSONBody

// GiveConsentToCollectJSONRequestBody defines body for GiveConsentToCollect for application/json ContentType.
type GiveConsentToCollectJSONRequestBody = GiveConsentToCollectJSONBody

// GiveConsentToShareJSONRequestBody defines body for GiveConsentToShare for application/json ContentType.
type GiveConsentToShareJSONRequestBody = GiveConsentToShareJSONBody

// AddPersonalityDataJSONRequestBody defines body for UpsertTraits for application/json ContentType.
type AddPersonalityDataJSONRequestBody = PersonalityData

// AddPersonalityDataJSONRequestBody defines body for UpsertTraits for application/json ContentType.
type AddPersonalityDataJSONRequestBody = PersonalityData

// AddAppContextDataJSONRequestBody defines body for AddAppContextData for application/json ContentType.
type AddAppContextDataJSONRequestBody = AppContext

// AddAppContextDataJSONRequestBody defines body for AddAppContextData for application/json ContentType.
type AddAppContextDataJSONRequestBody = AppContext

// AddEventJSONRequestBody defines body for AddEvent for application/json ContentType.
type AddEventJSONRequestBody = Event

// AddEventsJSONRequestBody defines body for AddEvents for application/json ContentType.
type AddEventsJSONRequestBody = Event

// AsPageEvent returns the union data inside the Event_Properties as a PageEvent
func (t Event_Properties) AsPageEvent() (PageEvent, error) {
	var body PageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPageEvent overwrites any union data inside the Event_Properties as the provided PageEvent
func (t *Event_Properties) FromPageEvent(v PageEvent) error {
	v.EventType = "Page"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePageEvent performs a merge with any union data inside the Event_Properties, using the provided PageEvent
func (t *Event_Properties) MergePageEvent(v PageEvent) error {
	v.EventType = "Page"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTrackEvent returns the union data inside the Event_Properties as a TrackEvent
func (t Event_Properties) AsTrackEvent() (TrackEvent, error) {
	var body TrackEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrackEvent overwrites any union data inside the Event_Properties as the provided TrackEvent
func (t *Event_Properties) FromTrackEvent(v TrackEvent) error {
	v.EventType = "Track"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrackEvent performs a merge with any union data inside the Event_Properties, using the provided TrackEvent
func (t *Event_Properties) MergeTrackEvent(v TrackEvent) error {
	v.EventType = "Track"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentifyEvent returns the union data inside the Event_Properties as a IdentifyEvent
func (t Event_Properties) AsIdentifyEvent() (IdentifyEvent, error) {
	var body IdentifyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIdentifyEvent overwrites any union data inside the Event_Properties as the provided IdentifyEvent
func (t *Event_Properties) FromIdentifyEvent(v IdentifyEvent) error {
	v.EventType = "Identify"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentifyEvent performs a merge with any union data inside the Event_Properties, using the provided IdentifyEvent
func (t *Event_Properties) MergeIdentifyEvent(v IdentifyEvent) error {
	v.EventType = "Identify"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event_Properties) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"event_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Event_Properties) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "Identify":
		return t.AsIdentifyEvent()
	case "Page":
		return t.AsPageEvent()
	case "Track":
		return t.AsTrackEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Event_Properties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event_Properties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a user profile
	// (POST /profile)
	CreateProfile(ctx echo.Context) error
	// Fetch alias of a user
	// (GET /{perma_id}/alias)
	GetAlias(ctx echo.Context, permaId openapi_types.UUID) error
	// Merge different identities of a known user
	// (POST /{perma_id}/alias)
	AliasUser(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch users bounded to a profile
	// (GET /{perma_id}/bindUsers)
	GetUsersBindedToProfile(ctx echo.Context, permaId openapi_types.UUID) error
	// bind user identities to a known profile
	// (POST /{perma_id}/bindUsers)
	BindUserToProfile(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch profileconsent
	// (GET /{perma_id}/consent)
	GetConsentedApps(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch applications users has given consent to collect
	// (GET /{perma_id}/consent/collect)
	GetConsentedAppsToCollect(ctx echo.Context, permaId openapi_types.UUID) error
	// provide consent to collect data
	// (POST /{perma_id}/consent/collect)
	GiveConsentToCollect(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch applications users has given consent to share
	// (GET /{perma_id}/consent/share)
	GetConsentedAppsToShare(ctx echo.Context, permaId openapi_types.UUID) error
	// provide consent to share profile
	// (POST /{perma_id}/consent/share)
	GiveConsentToShare(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch 360 profile of a user
	// (GET /{perma_id}/profile)
	GetProfileData(ctx echo.Context, permaId openapi_types.UUID, params GetProfileDataParams) error
	// Fetch App context of the user
	// (GET /{perma_id}/profile/app_context)
	GetListofAppContextData(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch 360 profile of a user
	// (GET /{perma_id}/profile/personality)
	GetPersonalityProfileData(ctx echo.Context, permaId openapi_types.UUID) error
	// update personality data for a user
	// (PATCH /{perma_id}/profile/personality)
	AddPersonalityData(ctx echo.Context, permaId openapi_types.UUID) error
	// update personality data for a user
	// (PUT /{perma_id}/profile/personality)
	AddPersonalityData(ctx echo.Context, permaId openapi_types.UUID) error
	// Fetch App context of the user
	// (GET /{perma_id}/profile/{app_id}/app_context)
	GetAppContextData(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID) error
	// update personality data for a user
	// (PATCH /{perma_id}/profile/{app_id}/app_context)
	AddAppContextData(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID) error
	// update personality data for a user
	// (PUT /{perma_id}/profile/{app_id}/app_context)
	AddAppContextData(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID) error
	// Push profile events
	// (POST /{perma_id}/{app_id}/event)
	AddEvent(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID) error
	// Fetch events emitted by a user
	// (GET /{perma_id}/{app_id}/events)
	GetUserEvents(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID, params GetUserEventsParams) error
	// Push user events
	// (POST /{perma_id}/{app_id}/events)
	AddEvents(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID) error
	// Fetch specific event emitted by a user
	// (GET /{perma_id}/{app_id}/events/{event_id})
	GetUserEvent(ctx echo.Context, permaId openapi_types.UUID, appId openapi_types.UUID, eventId openapi_types.UUID, params GetUserEventParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateProfile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProfile(ctx)
	return err
}

// GetAlias converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAlias(ctx, permaId)
	return err
}

// AliasUser converts echo context to params.
func (w *ServerInterfaceWrapper) AliasUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AliasUser(ctx, permaId)
	return err
}

// GetUsersBindedToProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersBindedToProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersBindedToProfile(ctx, permaId)
	return err
}

// BindUserToProfile converts echo context to params.
func (w *ServerInterfaceWrapper) BindUserToProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BindUserToProfile(ctx, permaId)
	return err
}

// GetConsentedApps converts echo context to params.
func (w *ServerInterfaceWrapper) GetConsentedApps(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConsentedApps(ctx, permaId)
	return err
}

// GetConsentedAppsToCollect converts echo context to params.
func (w *ServerInterfaceWrapper) GetConsentedAppsToCollect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConsentedAppsToCollect(ctx, permaId)
	return err
}

// GiveConsentToCollect converts echo context to params.
func (w *ServerInterfaceWrapper) GiveConsentToCollect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GiveConsentToCollect(ctx, permaId)
	return err
}

// GetConsentedAppsToShare converts echo context to params.
func (w *ServerInterfaceWrapper) GetConsentedAppsToShare(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConsentedAppsToShare(ctx, permaId)
	return err
}

// GiveConsentToShare converts echo context to params.
func (w *ServerInterfaceWrapper) GiveConsentToShare(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GiveConsentToShare(ctx, permaId)
	return err
}

// GetProfileData converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfileDataParams
	// ------------- Optional query parameter "includeAppContext" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeAppContext", ctx.QueryParams(), &params.IncludeAppContext)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeAppContext: %s", err))
	}

	// ------------- Optional query parameter "app_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "app_id", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileData(ctx, permaId, params)
	return err
}

// GetListofAppContextData converts echo context to params.
func (w *ServerInterfaceWrapper) GetListofAppContextData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetListofAppContextData(ctx, permaId)
	return err
}

// GetPersonalityProfileData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPersonalityProfileData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPersonalityProfileData(ctx, permaId)
	return err
}

// UpsertTraits converts echo context to params.
func (w *ServerInterfaceWrapper) AddPersonalityData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddPersonalityData(ctx, permaId)
	return err
}

// UpsertTraits converts echo context to params.
func (w *ServerInterfaceWrapper) AddPersonalityData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddPersonalityData(ctx, permaId)
	return err
}

// GetAppContextData converts echo context to params.
func (w *ServerInterfaceWrapper) GetAppContextData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAppContextData(ctx, permaId, appId)
	return err
}

// AddAppContextData converts echo context to params.
func (w *ServerInterfaceWrapper) AddAppContextData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddAppContextData(ctx, permaId, appId)
	return err
}

// AddAppContextData converts echo context to params.
func (w *ServerInterfaceWrapper) AddAppContextData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddAppContextData(ctx, permaId, appId)
	return err
}

// AddEvent converts echo context to params.
func (w *ServerInterfaceWrapper) AddEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddEvent(ctx, permaId, appId)
	return err
}

// GetUserEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserEventsParams
	// ------------- Optional query parameter "searchString" -------------

	err = runtime.BindQueryParameter("form", true, false, "searchString", ctx.QueryParams(), &params.SearchString)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter searchString: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserEvents(ctx, permaId, appId, params)
	return err
}

// AddEvents converts echo context to params.
func (w *ServerInterfaceWrapper) AddEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddEvents(ctx, permaId, appId)
	return err
}

// GetUserEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "perma_id" -------------
	var permaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "perma_id", ctx.Param("perma_id"), &permaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perma_id: %s", err))
	}

	// ------------- Path parameter "app_id" -------------
	var appId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", ctx.Param("app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_id: %s", err))
	}

	// ------------- Path parameter "event_id" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", ctx.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserEventParams
	// ------------- Optional query parameter "searchString" -------------

	err = runtime.BindQueryParameter("form", true, false, "searchString", ctx.QueryParams(), &params.SearchString)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter searchString: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserEvent(ctx, permaId, appId, eventId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/profile", wrapper.CreateProfile)
	router.GET(baseURL+"/:perma_id/alias", wrapper.GetAlias)
	router.POST(baseURL+"/:perma_id/alias", wrapper.AliasUser)
	router.GET(baseURL+"/:perma_id/bindUsers", wrapper.GetUsersBindedToProfile)
	router.POST(baseURL+"/:perma_id/bindUsers", wrapper.BindUserToProfile)
	router.GET(baseURL+"/:perma_id/consent", wrapper.GetConsentedApps)
	router.GET(baseURL+"/:perma_id/consent/collect", wrapper.GetConsentedAppsToCollect)
	router.POST(baseURL+"/:perma_id/consent/collect", wrapper.GiveConsentToCollect)
	router.GET(baseURL+"/:perma_id/consent/share", wrapper.GetConsentedAppsToShare)
	router.POST(baseURL+"/:perma_id/consent/share", wrapper.GiveConsentToShare)
	router.GET(baseURL+"/:perma_id/profile", wrapper.GetProfileData)
	router.GET(baseURL+"/:perma_id/profile/app_context", wrapper.GetListofAppContextData)
	router.GET(baseURL+"/:perma_id/profile/personality", wrapper.GetPersonalityProfileData)
	router.PATCH(baseURL+"/:perma_id/profile/personality", wrapper.AddPersonalityData)
	router.PUT(baseURL+"/:perma_id/profile/personality", wrapper.AddPersonalityData)
	router.GET(baseURL+"/:perma_id/profile/:app_id/app_context", wrapper.GetAppContextData)
	router.PATCH(baseURL+"/:perma_id/profile/:app_id/app_context", wrapper.AddAppContextData)
	router.PUT(baseURL+"/:perma_id/profile/:app_id/app_context", wrapper.AddAppContextData)
	router.POST(baseURL+"/:perma_id/:app_id/event", wrapper.AddEvent)
	router.GET(baseURL+"/:perma_id/:app_id/events", wrapper.GetUserEvents)
	router.POST(baseURL+"/:perma_id/:app_id/events", wrapper.AddEvents)
	router.GET(baseURL+"/:perma_id/:app_id/events/:event_id", wrapper.GetUserEvent)

}
